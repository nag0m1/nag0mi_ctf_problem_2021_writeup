from sage.all import *
from Crypto.Util.number import long_to_bytes

#[s]P =Q , p is prime P,Q are rational number
#SSSA is prime = #EFpのAnomarous曲線時に使える攻撃法
def SmartAttack(P,Q,p):
    E = P.curve()
    Eqp = EllipticCurve(Qp(p, 2), [ ZZ(t) + randint(0,p)*p for t in E.a_invariants() ])

    P_Qps = Eqp.lift_x(ZZ(P.xy()[0]), all=True)
    for P_Qp in P_Qps:
        if GF(p)(P_Qp.xy()[1]) == P.xy()[1]:
            break

    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[0]), all=True)
    for Q_Qp in Q_Qps:
        if GF(p)(Q_Qp.xy()[1]) == Q.xy()[1]:
            break

    p_times_P = p*P_Qp
    p_times_Q = p*Q_Qp

    x_P,y_P = p_times_P.xy()
    x_Q,y_Q = p_times_Q.xy()

    phi_P = -(x_P/y_P)
    phi_Q = -(x_Q/y_Q)
    k = phi_Q/phi_P
    return ZZ(k)


p,a,b=1727252033904174334846497507780328218112467726681054013200524406716221061023358280347395639869309464744762734674078249821655448592760317955020382603347044698769 ,0 ,431813008476043583711624376945082054528116931670263503300131101679055265255839570086848909967327366186190683668519562455413862148190079488755095650836761174695

E = EllipticCurve(GF(p), [a,b])
P =E(1512288301870697541914385659853662510933210368683904979701298079965184580125242387883749488885378525231031929626453734328121268617319859620844438017300196062220,1153437583316473123718744395800690094752719048242675477436214957387393325044643421309979562018531953742580236944983905514774872270015504311841461041375313710183)
Q =E (972927867402724418343936887877144098623212678734474105694470886165184862270539395546503438333847772940432683591446207756974625835333835492665051004313163826891,67380805070030224569243746642648006252612459337222223510371704866096640726973323973636943422590561608369415931640073727129865450259989533683040279129171829310)

flag =SmartAttack(P,Q,p)
print()
print(long_to_bytes(flag))
